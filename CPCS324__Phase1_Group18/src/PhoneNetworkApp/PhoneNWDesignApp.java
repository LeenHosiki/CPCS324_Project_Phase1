package PhoneNetworkApp;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import GraphFramework.*;

/*
 *  @authors Kawka
 */

 /* 
Group 18
Kawther Kamal 
Leen Hosiki 
Layan othman Algarni 
Arwa Alamoudi 

4 JUNE 2023
 */

public class PhoneNWDesignApp {
    public static void main(String[] args) throws FileNotFoundException {
        Scanner input = new Scanner(System.in);
      int n = 0;// # of vertexs
        int m = 0;  // #of edges 

        // Print welcome messgae
        System.out.println("  -------------------Welcome to Compute the Minimum Spanning Tree-------------------");
        System.out.println("-------------Compear btween Kruskal's Algorithm & Prim's Algorithm Prim's Algorithm (based on Min Heap)-------------");
        
        System.out.println("Please choose");
        System.out.println("1- Rread Graph From File"); // Requirement 1
        System.out.println("2- Make random Graph"); // Requirement 2
        System.out.println(); // format

        // Take choice input from user
        System.out.print("Enter your choice: ");
        int choice = input.nextInt(); // user choice
        System.out.println(); // format

        // Make sure input is valid
        while (choice != 1 && choice != 2) {
            System.out.println("Your choice is incorrect!");
            System.out.print("Try again: ");
            choice = input.nextInt();
        }

// ------------------------------------- User Choice "1"Requirement 1: (Rread Graph From File)
        if (choice == 1) {
            System.out.println("-----------------------------------"); // Format
            System.out.println("Your choice is .. Read Graph From File  ");
           String fileName="CPCS324.txt";
            BluePrGraph graphObj = new BluePrGraph(new File(fileName)); // Create BluePrintGraph object


// ------------------------------------ Kruskal's Algorithm 
            System.out.println(); // Format
            System.out.println("The phone network (minimum spanning tree) generated by Kruskal algorithm is as follows");
            
            MSTAlgorithm KruskalObj = new KruskalAlg(graphObj); // Create Kruskal object
            KruskalObj.doMST(graphObj); // Apply Kruskal
            KruskalObj.displayResultingMST();  // Print results


// ------------------------------------ Prim's Algorithm
            System.out.println(); // Format
            System.out.println("The phone network (minimum spanning tree) generated by MinHeap Prim algorithm is as follows:");
            
           
            MSTAlgorithm PrObj = new MHPrimAlg(graphObj); // Create Prim object          
            PrObj.doMST(graphObj); // Apply Prim          
            PrObj.displayResultingMST();  // Print results

        }

// ------------------------------------- choice 2 Make Graph (randomly)
        if (choice == 2) {
            System.out.println("-----------------------------------");
            System.out.println("You choice is .. Make Graph (randomly)");

            System.out.println("Choice one of the cases to Compear");
            System.out.println("note: n is number of vertices | m is number of edges");
            System.out.println("1-  n=1,000 - m=10,000");
            System.out.println("2-  n=1,000 - m=15,000");
            System.out.println("3-  n=1,000 - m=25,000");
            System.out.println("4-  n=5,000 - m=15,000");
            System.out.println("5-  n=5,000 - m=25,000");
            System.out.println("6- n=10,000 - m=15,000");
            System.out.println("7-  n=10,000 - m=25,000");
            System.out.println();
            System.out.print("Enter your choice : ");//take the choice from the user
            int Choice_Case = input.nextInt();// user choice
            while (Choice_Case < 1 || Choice_Case > 7) {
                System.out.println("Your choice is incorrect !!1!! ");
                System.out.print("Try again : ");
                Choice_Case = input.nextInt();
                System.out.println(); //New line
            }

            switch (Choice_Case) {
                case 1: {
                    n = 1000;
                    m = 10000;
                    break;
                }
                case 2: {
                    n = 1000;
                    m = 15000;
                    break;
                }
                case 3: {
                    n = 1000;
                    m = 25000;
                    break;
                }
                case 4: {
                    n = 5000;
                    m = 15000;
                    break;
                }
                case 5: {
                    n = 5000;
                    m = 25000;
                    break;
                }
                case 6: {
                    n = 10000;
                    m = 15000;
                    break;
                }
                case 7: {
                    n = 10000;
                    m = 25000;
                    break;
                }
            }
            
            // ----------------------------------------------------------------------

             BluePrGraph graphObj = new BluePrGraph(n, m, false); // Create object of BluePrintGraph  
             MSTAlgorithm MSTAlgorithm;
            System.out.println();
            System.out.println("****** The graphs is undirected ******");
            System.out.println();

// ------------------------------------ Kruskal algorithm 
            System.out.println();
            System.out.println("-------------------------------------------------------------------------------");
            System.out.println("The phone network (minimum spanning tree) generated by Kruskal algorithm is as follows");

            double startTime_kruskal = System.currentTimeMillis();
            MSTAlgorithm KrObj = new KruskalAlg(graphObj);
            KrObj.doMST(graphObj);
            double finishTime_kruskal = System.currentTimeMillis();
            double totalTime_kruskal = finishTime_kruskal - startTime_kruskal;
            KrObj.displayResultingMST();
            //System.out.println("Runtime Results: ");
            System.out.println();
            System.out.println();
            System.out.println("Total runtime of Kruskal's Algorithm : " + totalTime_kruskal+"  Millis");

// ------------------------------------ Prim algorithm    
            System.out.println();
            System.out.println();
            System.out.println("-------------------------------------------------------------------------------");
            System.out.println("The phone network (minimum spanning tree) generated by MinHeap Prim algorithm is as follows:");

            MSTAlgorithm PrObj = new MHPrimAlg(graphObj);
            double startTime_primMH = System.currentTimeMillis();
            PrObj.doMST(graphObj);
            double finishTime_primMH = System.currentTimeMillis();
            double totalTime_primMH = finishTime_primMH - startTime_primMH;
            PrObj.displayResultingMST();// Get the MST-Cost of Prim
            System.out.println();
            System.out.println("Total runtime of Prim's MinHeap Algorithm : " + totalTime_primMH +"  Millis");

        }
        System.out.println();
        System.out.println(" \t\t------------- Thank YOU :) -------------");

    }
}
